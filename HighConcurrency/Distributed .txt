【CAP定理】：
C：数据一致性 Consistent 
A：高可用性 Available
P：分区容错性Partition Tolerance

CAP无法同时满足。
一般来说分布式系统首先要保证P分区容错性
因为不保证它，设计出来的系统将是非常糟糕的。
比如两个节点A和B做主备高可用。某一时刻心跳断了，这个时候A，B都会以为对方死掉，然后接管系统，争抢资源，这就是我们说的脑裂现象。
一旦网络恢复，比如是数据系统，那么两边的数据不一致，那你要修复这个集群，只能丢弃一边的数据了。

A就是可用性，我们通常说的高可用4个9,5个9，就是要保证尽肯能多的时候集群可用。就算某个节点宕机了，但对客户来说不感知不影响。

C就是数据一致性。集群里面通常在某个节点写入了数据后，需要把数据同步到其他节点上。

分区容错是必须保证的，在这个前提下，一致性和可用性是不可兼得的。

如果我们要保证一致性，那么我们就要加锁，保证在数据同步完成后其他节点才可用。
那么锁定期间，其他节点是不可用的。
如果要保证可用性，那么就不能锁，那一致性不成立。



【分布式系统理论之Quorum机制】  https://www.cnblogs.com/hapjin/p/5626889.html 

CAP极端情况就是，为了保持一致性，写的时候要写所以节点，读的时候读任意一个节点就可以了。
写操作是比较脆弱的，因为有一个节点失败了，那这次写就不成功。而读的话，就算只存活一个节点，也是能读成功的。

那么Quorum理论就是在读和写的节点数量之间取一个折中值。
一般来说，让大多数节点写入，我们就认为写入成功了，返回给前台成功。而其他数据未同步的节点可以在后台继续同步，前台不感知。
但是这样的话，读就不能只读一个节点了，因为可能读到没有更新的值。所以一般写节点+读节点要大于所有节点. 比如有5个节点，那么写节点大多数Majority是3
那么写入3个节点就算成功了。读节点也应是3，这样读出来的值，至少有1个一定能读到新值。3+3=6>5.

【Raft机制】 
https://www.cnblogs.com/developing/articles/11129289.html

【Raft与Paxos区别】
https://zhuanlan.zhihu.com/p/163271175