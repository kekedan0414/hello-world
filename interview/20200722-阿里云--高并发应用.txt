问题：
1、zookeeper应用的场景。
2、布隆过滤器是什么？
3、redis穿透的解决方案？
4、布隆过滤器在redis中的什么问题。
5、除了布隆过滤器，还有什么方案解决redis穿透问题。
6、redis雪崩是什么？ 怎么解决？
7、突然大量请求过来，服务器承受不了，怎么解决？
8、令牌桶与漏桶原理？
9、分布式CAP是什么？
10、volatile 有什么用？ 除了同步，另一个作用是什么？
11、synchronize的几种级别？
12、raft与Paxos了解吗？
13、MQ的应用场景。
14、如何解决MQ消息丢失？
15、什么是一致性Hash？
16、HashMap中hash冲突了怎么办？还有没有其他方法?



---------------------------------------
1、zookeeper应用的场景。

----------------------------------------
3、redis穿透的解决方案？
   布隆过滤器

参考：https://baijiahao.baidu.com/s?id=1660009541007805174&wfr=spider&for=pc
----------------------------------------
2、布隆过滤器是什么？
   布隆过滤器是一个byte二进制的数组。然后有几个hash函数。他可以告诉你某个事件一定不会发生，但是不能确定某个事件100%会发生。
   比如有3个hash函数，只要有一个hash函数在数组中得到的数据为0，则可以肯定这个Key不存在。但因为有hash冲突，3个hash得到1也不能100%确定数据存在，有误判率。
----------------------------------------
4、布隆过滤器在redis中如何解决穿透问题？
   redis穿透是因为突然海量请求访问了数据库不存在的数据，导致直接绕过了redis，把数据库打崩。
   
----------------------------------------
5、除了布隆过滤器，还有什么方案解决redis穿透问题。
   给不存在的数据设置一个null值，并设置一个合适的过期时间。
----------------------------------------
6、redis雪崩是什么？ 怎么解决？
    设置热点数据不过期。
    如果不是热点数据的话，设置一个随机的过期时间，避免redis在空闲的时候大量请求过来，直接打到数据库。
----------------------------------------
7、突然大量请求过来，服务器承受不了，怎么解决？
----------------------------------------
   服务限流，数据库因为历史原因，横向扩展是一件非常复杂的工程，所有我们一般会尽量把流量都挡在数据库之前。
   一是使用应用到数据库之间使用缓存，二是应用之间使用消息队列限流。三是服务降级，网络链路熔断，调用本地方法。

参考：https://blog.csdn.net/qq_37312838/article/details/82966209
----------------------------------------   
8、令牌桶与漏桶原理？
    令牌桶与漏筒都是服务器限流的算法。
   漏桶算法能够强行限制数据的传输速率。
   令牌桶算法能够在限制数据的传输速率的同时还允许某种程度的突发传输。
   令牌桶的原理是以恒定的速率往桶里面放令牌token，拿到这个token的请求可以被处理掉。当桶里面空了，就拒绝服务。
   如果之前流量较低，桶里的令牌就会积累比较多，如果突然请求增多，可以快速拿到较多的令牌，有应对突发流量的能力。

参考：https://blog.csdn.net/m0_37477061/article/details/95313062?utm_source=blogxgwz4
----------------------------------------
9、分布式CAP是什么？
----------------------------------------
10、volatile 有什么用？ 除了同步，另一个作用是什么？
----------------------------------------
11、synchronize的几种级别？
----------------------------------------
12、raft与Paxos了解吗？
----------------------------------------
13、MQ的应用场景。
    1、抵御流量洪峰。海量的请求直接打到服务器可能导致应用服务直接奔溃，请求先进MQ保存，MQ根据服务器的最大处理能力给他消费，保证服务器的可用性。
    2、应用服务之间的解耦。好处就是就算一个系统挂了，也只是消息积压在MQ里面没人进行消费而已，不会对其他的系统产生影响。
    3、发布订阅模式，服务之间的异步调用，提升响应效率。比如A的某个数据，要提供非BCD，那么A需要调用BCD，如果是串行的同步的就会比较慢。
       中间添加MQ，BCD都可以一起取数据并消费，提高了效率。

参考：https://www.cnblogs.com/jack1995/p/10908789.html
----------------------------------------
14、如何解决MQ消息丢失？
 1、生产者生产消息给MQ，可能因为网络问题发生消息丢失。一般MQ接收到消息后会返回一个成功确认。如果未收到确认，就重试发送。
 2、MQ保存消息时，默认优先保存在内存中，并返回确认值给生产者。一旦MQ挂了，消息就丢失了，可以设置保存在磁盘后再发送确认值。
    也可以设置主从节点，把消息同步到从节点上，再返回确认值给生产者。性能会下降，生产中需要综合考虑
 4、消费者消费消息的时候，也可能发生网络问题，这时候MQ没有收到消费者的确认信息，会保留消息给消费者重试拉取。 
    另一种情况就是收到消息并发送了确认，还没来得及处理就消费者挂了，消息丢失，而MQ也因为收到确认消息出列了。
    解决方案：在消费者处理完这条消息后再发送确认给MQ。

参考：https://cloud.tencent.com/developer/article/1605159
      https://www.cnblogs.com/jack1995/p/10908809.html
----------------------------------------
15、什么是一致性Hash
----------------------------------------
16、HashMap中hash冲突了怎么办？还有没有其他方法？
     Java中是用的数组+链表的形式